;     This Code is inspired by Yuqiang Guan and 
;     the original source code of the program is released under the GNU Public License (GPL)
;     from:
;     http://www.dataminingresearch.com/index.php/2010/06/gmeans-clustering-software-compatible-with-gcc-4/
;     Copyright (c) 2003, Yuqiang Guan

(module
  (import io)
  (import random)

	(define-datatype values-t
	;;Value x y
	(Value float float))

	; Col value on matrix
	(define (read-matrix f)
    	(let* ((v1 (file-read-float f))
           (v2 (file-read-float f)))
       (Value v1 v2)))
	
	(define (dummyread)
	(Value 0.0 0.0))
	
	(define (setval a b)
	(Value a b))

	(define (reader)
	  (let ((f (file-open "AllRandom.mtx" )))
	        (let ((row (file-read-int f)))
		(let ((col (file-read-int f)))
		 (println* "Reading " col " lines.")
		  (let ((matrix (make-vector col (dummyread))))
                   (for(i 0 col) 
		      (set! (vector-ref matrix i) (read-matrix f))
		    )
	  (file-close f)
          ;;The above code is what is required to read a file of .mtx format with row col \n value value \n value value ... row is however omitted here
	  matrix)))));)

	 (define (readerCol)
	  (let ((f (file-open "AllRandom.mtx" )))
	  (let ((row (file-read-int f)))
	  (let ((col (file-read-int f)))
          (file-close f)
	 col))))

        (define (NormalVectorCalc matvec)
          (match matvec ;;match to a type
	   ((Value v1 v2)
            (let(( val (* v1 v1))(val2 (* v2 v2)))
	(+ val val2)))))

	(define (normalvector matvec col)
	  (let ((normalVector (make-vector col 1)))
                   (for(i 0 col) 
		      (set! (vector-ref normalVector i) (NormalVectorCalc (vector-ref matvec i)))
		    )
	normalVector))

	(define (VectorInit)
	(Value 0.0 0.0))

	(define (ConceptVectorInit col)
	  (let ((cVector (make-vector col (VectorInit))))
                   (for(i 0 col) 
		      (set! (vector-ref cVector i) (VectorInit))
		    )
	cVector))

	(define (BoolInit)
	#f)

	(define (boolVector col)
	  (let ((cVector (make-vector col (BoolInit))))
                   (for(i 0 col) 
		      (set! (vector-ref cVector i) (BoolInit))
		    )
	cVector))

	(define (SingleArray col)
	  (let ((cVector (make-vector col 1)))
                   (for(i 0 col) 
		      (set! (vector-ref cVector i) 0)
		    )
	cVector))

	(define (FloatArray col)
	  (let ((cVector (make-vector col 1)))
                   (for(i 0 col) 
		      (set! (vector-ref cVector i) 0.0)
		    )
	cVector))

	(define (getData vector i)
          (match vector ;;match to a type
	   ((Value v1 v2)
        (if(< i 1) v1 v2))))

	(define (AddRandom r cV col);;to be used once...
          (match (random r)
          ((RandomResult n r)
            (set! (vector-ref cV 0) (mod n col))
          (println* "the random in col is: " (mod n col));;debug
	cV)))

	(define (VectorAddition vec1 vec2)
	 (let((v1 (+ (getData vec1 0) (getData vec2 0))) (v2(+ (getData vec1 1) (getData vec2 1))))
	(Value v1 v2)))	

	(define (IthAddCV i cv matvec)
	   (VectorAddition cv (vector-ref matvec i)))

	(define (EucDistance x1 x2 v1 v2 norm normalVector)
	  (let((result0(* x1 v1))(result1(* x2 v2)) (sim 0.0))
	   (set! sim (+ sim (+ result0 result1)))
	   (set! sim (* sim -2.0))
	   (let((normresult(+ normalVector norm)))
	   (set! sim (+ sim normresult)) 
	   ;(println* "in eucDistance sim: " sim " norm and normalVector: " norm " " normalVector " the results: " result0 " " result1 )
	sim)))

	(define (PreEucDistance sim data normal normalVector mat)
	(match data
	((Value data1 data2)
	(match mat
	((Value val1 val2)	 
         (EucDistance data1 data2 val1 val2 normal normalVector) )))))

	(define (EucDis result normal data col normalVector mat cluster)
	   (for(i 0 col)
	     (set! (vector-ref result (+ i (* cluster col))) (PreEucDistance (vector-ref result (+ i (* cluster col))) data normal (vector-ref normalVector i) (vector-ref mat i)) )	
	   )
		result)

	;;                 sim i inputvector conceptvector col normalvector values
	(define (PreEucDis result i normal data col normalVector mat cluster)
	    	(EucDis result (vector-ref normal i) (vector-ref data i) col normalVector mat cluster))

	(define (setVectorData vectordat i vectorData)
	   (set! (vector-ref vectordat i) vectorData )
        vectordat)

	(define (averageVector val num);(vector-ref conceptVector i) (vector-ref clusterpointer i)
	 (match val
	 ((Value v1 v2)
	 (let( (t1 (/ v1 num)) (t2 (/ v2 num) ))
	(Value t1 t2) ))))

	(define (ClusterSize pointsinCluster clusterpointer clusterint col)
	  (set! pointsinCluster (FloatArray clusterint))
	  (for(i 0 col)
	    (set! (vector-ref pointsinCluster (vector-ref clusterpointer i)) (+ (vector-ref pointsinCluster (vector-ref clusterpointer i)) 1) )
	  )
	pointsinCluster)

	(define (norm2 vec)
	(match vec
	((Value v1 v2)
	(let( (t1 (* v1 v1)) (t2 (* v2 v2)) )
	(+ t1 t2) ))))

	(define (clusterQ CQ clusterPointer i simMat col)
	  (set! (vector-ref CQ clusterPointer) (vector-ref simMat (+ i (* clusterPointer col)) ) )
	CQ)

	(define (Coherence clusterInt CQ)
	(let((value 0.0) )
	(for(i 0 clusterInt)
	 (set! value (+ (vector-ref CQ i) value)) )	
	value))

	(define (Kmeans-Algorithm mat clusterint col normalVector result conceptVector simMat cV normalCV pointsinCluster clusterpointer clusterquality initialobjval threshold)
	 (let((niter 0) (noassign #t) (pre_result 0.0) (eststart 5) (k 0))
	 (let((multi 0) (tempCluster 0) (tempSim 0) (changed 0) (difference (FloatArray clusterint)))
;	
;;as there is no do while all code will be repeated before the while
;
	 (set! pre_result result)
	   (set! niter (+ niter 1))
	   ;;ASSIGN START
	  
	   (set! multi 0) (set! tempCluster 0) (set! changed 0) (set! tempSim 0)

	  (for(i 0 col)
	    (set! tempCluster (vector-ref clusterpointer i))
	    (set! tempSim (vector-ref simMat (+ i (* (vector-ref clusterpointer i) col))))
	    (for(j 0 clusterint)
	      (if(= j (vector-ref clusterpointer i)) 0 
	        (for(one 0 1)
		    (if(< (vector-ref simMat (+ i (* j col))) tempSim) 
		      (for(two 0 1)
			(set! tempCluster j)
			(set! tempSim (vector-ref simMat (+ i (* j col))))			
			))
	        ))
	    ) 
	    (if(= (vector-ref clusterpointer i) tempCluster ) 0 
	      (for(three 0 1)
		(set! (vector-ref simMat (+ i (* tempCluster col))) tempSim)
		(set! changed (+ changed 1))
	        (set! (vector-ref clusterpointer i) tempCluster)
	      ))
	  )
	  (println* "was anything changed ?" changed)
	  ;; ASSIGN END
	  (if(= changed 0) 0 (for(one 0 1)
	  ;;ELSE (simulated with for loop because i could not create a body with parenthesis)
	  (set! noassign #f)
	  
	  (set! pointsinCluster(ClusterSize pointsinCluster clusterpointer clusterint col))

	  ;;UpdateCentroid
	  (set! conceptVector (ConceptVectorInit clusterint) )
	  (for(i 0 col)
	    (set! (vector-ref conceptVector (vector-ref clusterpointer i)) (IthAddCV i (vector-ref conceptVector (vector-ref clusterpointer i)) mat )   )
	  )
	  ;;updateCentroid DONE

	  (for(i 0 clusterint)
	    (set! (vector-ref conceptVector i) (averageVector (vector-ref conceptVector i) (vector-ref pointsinCluster i) ))  
	  )

	  (for(i 0 clusterint)
	    (set! (vector-ref normalCV i) (norm2 (vector-ref conceptVector i)))
	  )
	
	  ;	   
	  ; If iterations go above 5 we need to implement the use of oldvectors to create a bigger difference
	  ;

	  (for(i 0 clusterint)
	    (set! simMat (PreEucDis simMat i normalCV conceptVector col normalVector mat 1))
	  )

	  (set! clusterquality (FloatArray clusterint))
	  (for(i 0 col)
	    (set! k (vector-ref clusterpointer i))
	    (set! clusterquality (clusterQ clusterquality k i simMat col) )
	  )

	  (set! result (Coherence clusterint clusterquality))

	 )) ;; if end do not remove

;
;
;       THE WHILE START NOW
;
;
	 (while (> (- pre_result result) (* initialobjval 0.001))
	   (set! pre_result result)
	   (set! niter (+ niter 1))
	   ;;ASSIGN START
	  
	   (set! multi 0) (set! tempCluster 0) (set! changed 0) (set! tempSim 0)

	  (for(i 0 col)
	    (set! tempCluster (vector-ref clusterpointer i))
	    (set! tempSim (vector-ref simMat (+ i (* (vector-ref clusterpointer i) col))))
	    (for(j 0 clusterint)
	      (if(= j (vector-ref clusterpointer i)) 0 
	        (for(one 0 1)
		    (if(< (vector-ref simMat (+ i (* j col))) tempSim) 
		      (for(two 0 1)
			(set! tempCluster j)
			(set! tempSim (vector-ref simMat (+ i (* j col))))			
			))
	        ))
	    ) 
	    (if(= (vector-ref clusterpointer i) tempCluster ) 0 
	      (for(three 0 1)
		(set! (vector-ref simMat (+ i (* tempCluster col))) tempSim)
		(set! changed (+ changed 1))
	        (set! (vector-ref clusterpointer i) tempCluster)
	      ))
	  )
	  ;; ASSIGN END
	  (if(= changed 0) 0 (for(one 0 1)
	  ;;ELSE (simulated with for loop because i could not create a body with parenthesis)
	  (set! noassign #f)
	  
	  (set! pointsinCluster(ClusterSize pointsinCluster clusterpointer clusterint col))

	  ;;UpdateCentroid
	  (set! conceptVector (ConceptVectorInit clusterint) )
	  (for(i 0 col)
	    (set! (vector-ref conceptVector (vector-ref clusterpointer i)) (IthAddCV i (vector-ref conceptVector (vector-ref clusterpointer i)) mat )   )
	  )
	  ;;updateCentroid DONE

	  (for(i 0 clusterint)
	    (set! (vector-ref conceptVector i) (averageVector (vector-ref conceptVector i) (vector-ref pointsinCluster i) ))  
	  )

	  (for(i 0 clusterint)
	    (set! (vector-ref normalCV i) (norm2 (vector-ref conceptVector i)))
	  )
	
	  ;	   
	  ; If iterations go above 5 we need to implement the use of oldvectors to create a bigger difference
	  ;

	  (for(i 0 clusterint)
	    (set! simMat (PreEucDis simMat i normalCV conceptVector col normalVector mat 1))
	  )

	  (set! clusterquality (FloatArray clusterint))
	  (for(i 0 col)
	    (set! k (vector-ref clusterpointer i))
	    (set! clusterquality (clusterQ clusterquality k i simMat col) )
	  )

	  (set! result (Coherence clusterint clusterquality))

	 )) ;; if end do not remove
         ) ;; while end do not remove
	
	(println* "done")
	0)))

	(define (main)
	  (let((mat (reader)));;now the Matrix is loaded
	  (println* "first line: " (vector-ref mat 0) )
          (let((clusterint 4))
	  (let((col(readerCol))) ;; col is set
	  (let((marked (boolVector col)))
	  (println* "col value is: " col)
	  (let((normalVector ( normalvector mat col)));; normal vector calculated
	  (println* "346 normalvector: " (vector-ref normalVector 346) )
	  (let((nVzero(vector-ref normalVector 0)))
	  (let((conceptVector ( ConceptVectorInit clusterint)));; Conceptvector init
          (println* "first conceptVector: " (vector-ref conceptVector 0) )
	  ;;Will handle the simMat with an offset instead
	  (let((simMat ( FloatArray (* col clusterint))));; Conceptvector init
          (println* "first conceptVector: " (vector-ref simMat 0) )
 	  (let((cV (SingleArray clusterint))) ;;addrandom clustervector 4 clusters
          (println* "first cV: " (vector-ref cV 0) )

	  (let((cV (AddRandom (init-rand) cV col)))
          (println* "cV Random: " (vector-ref cV 0))
	  (set! (vector-ref conceptVector 0) (IthAddCV (vector-ref cV 0) (vector-ref conceptVector 0) mat)))
	  (println* "first ith data: " (vector-ref conceptVector 0) )
	  (println* "get Data test" (getData (vector-ref mat 0) 1))
	  ;;timer should be inserted when the Kmeans algorithm actually starts.
	  (let((normalCV (FloatArray col))) ;; init normal_cv
          (println* "first normalCV: " (vector-ref normalCV 0) " still working ?" )
	  (let((normalCV (setVectorData normalCV 0 nVzero)))
	  (set! (vector-ref normalCV 0) (vector-ref normalVector (vector-ref cV 0)) )
          (println* "first normalCV: " (vector-ref normalCV 0) " still working ?" )
	  (let((simMat (PreEucDis simMat 0 normalCV conceptVector col normalVector mat 0)))
	  (println* "simMat: " (vector-ref simMat 0) " still working ?" )
	  (let((pointsinCluster (FloatArray clusterint)))
	  (set! (vector-ref marked 0) #t)
	  ;
          ;;need to check if they have been placed or not this is certainly why the algorithm bugs out right now..
          ; 
	  (let((minind 0) (mind 0)(cossum 0))

	  (for(i 0 clusterint)
	    (set! minind 0)
	    (set! mind 0)
	    (for(j 0 col)
	      (if(= (vector-ref marked j) #f) (for(one 0 1) 
	      (set! cossum 0)
	      (for(k 0 i)
	        (set! cossum(+ cossum (vector-ref simMat (+ j (* k col)))))
	      )
	      (if(> cossum mind) (for(two 0 1)
		(set! minind j)
		(set! mind cossum)
		;(println* "do i get in here?")
		))
	      ))
	    )
	    (set! (vector-ref cV i) minind)
	    (set! (vector-ref conceptVector i) (IthAddCV (vector-ref cV i) (vector-ref conceptVector i) mat))
	    (set! (vector-ref normalCV i) (vector-ref normalVector (vector-ref cV i)))
	    (set! simMat (PreEucDis simMat i normalCV conceptVector col normalVector mat i))
	    (set! (vector-ref marked (vector-ref cV i)) #t)
	    (println* "cV: " (vector-ref cV i) " conceptVector: " (vector-ref conceptVector i) " normalCV: " (vector-ref normalCV i))
	  ) 

	(let((clusterpointer(SingleArray col)))
	  ;InitAssignCluster as I cannot find where to return multiple data without the need to split them afterwards I will make them in main but not optimal. changed is for later just implemented now to copy paste
          (println* "We are still alive before assign")
	  (let((multi 0) (tempCluster 0) (tempSim 0) (changed 0))

	  (for(i 0 col)
	    (set! tempCluster (vector-ref clusterpointer i))
	    (set! tempSim (vector-ref simMat (+ i (* (vector-ref clusterpointer i) col))))
	    (for(j 0 clusterint)
	      (if(= j (vector-ref clusterpointer i)) 0 
	        (for(one 0 1)
		    (if(< (vector-ref simMat (+ i (* j col))) tempSim) 
		      (for(two 0 1)
			(set! tempCluster j)
			(set! tempSim (vector-ref simMat (+ i (* j col))))			
			))
	        ))
	    ) 
	    (if(= (vector-ref clusterpointer i) tempCluster ) 0 
	      (for(three 0 1)
		(set! (vector-ref simMat (+ i (* tempCluster col))) tempSim)
		(set! changed (+ changed 1))
	        (set! (vector-ref clusterpointer i) tempCluster)
	      ))
	  )
	(println* "still alive after assignment" )
        (println* "was anything changed ?" changed)
	;last of initial, resetting and extra methods
	(set! conceptVector ( ConceptVectorInit col))

	(for(i 0 col)
	  (if(>= (vector-ref clusterpointer i) 0) (if(< (vector-ref clusterpointer i) clusterint) (set! (vector-ref conceptVector (vector-ref clusterpointer i)) (IthAddCV i (vector-ref conceptVector (vector-ref clusterpointer i)) mat)) (set! (vector-ref clusterpointer i)0 )) )
	)
	(println* "still alive 1" )
	(set! pointsinCluster(ClusterSize pointsinCluster clusterpointer clusterint col))

	(for(i 0 clusterint)
	 (set! (vector-ref conceptVector i) (averageVector (vector-ref conceptVector i) (vector-ref pointsinCluster i) ))  
	)
	(println* "still alive 2" )
	(for(i 0 clusterint)
	  (set! (vector-ref normalCV i) (norm2 (vector-ref conceptVector i)))
	)
	(println* "still alive 3" )
	(for(i 0 clusterint)
	  (set! simMat (PreEucDis simMat i normalCV conceptVector col normalVector mat 0))
	)
	(println* "still alive 4" )
	(let( (clusterquality (FloatArray clusterint)) (k 0))
	(println* "still alive 5" )
	(for(i 0 col)
	  (set! k (vector-ref clusterpointer i))
	  (set! clusterquality (clusterQ clusterquality k i simMat col) )
	)
	(println* "still alive 6" )
	(let( (initialobjval (Coherence clusterint clusterquality)) (result (Coherence clusterint clusterquality)) (delta 0.000001) )
	(let( (threshold (*(* -1.0 initialobjval) delta))   )

	(Kmeans-Algorithm mat clusterint col normalVector result conceptVector simMat cV normalCV pointsinCluster clusterpointer clusterquality initialobjval threshold)

	0)))))))))) )))))) ) )) ) ));;the weird spacing is just to have control over how many parenthesis that have been used.

)
